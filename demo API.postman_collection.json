{
	"info": {
		"_postman_id": "354f571e-b8f8-4da2-ab33-85fe797eaaa3",
		"name": "demo API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "company details 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"company ID is 1\", () => {\r",
							"    pm.expect(response.cmp_id).to.eql(1);\r",
							"});\r",
							"pm.test(\"company pin is houseo9721\", () => {\r",
							"    pm.expect(response.company_pin).to.eql(\"houseo9721\");\r",
							"});\r",
							"pm.test(\"company ind_code is constructions\", () => {\r",
							"    pm.expect(response.ind_code).to.eql(\"constructions\");\r",
							"});\r",
							"pm.test(\"company cbt_code is GC\", () => {\r",
							"    pm.expect(response.cbt_code).to.eql(\"GC\");\r",
							"});\r",
							"pm.test(\"company cbt_code is GC\", () => {\r",
							"    pm.expect(response.cbt_code).to.eql(\"GC\");\r",
							"});\r",
							"pm.test(\"company cst_code is EL\", () => {\r",
							"    pm.expect(response.cst_code).to.eql(\"EL\");\r",
							"});\r",
							"pm.test(\"company cnt_code is empty\", () => {\r",
							"    pm.expect(response.cnt_code).to.eql(\"\");\r",
							"});\r",
							"pm.test(\"company cmp_status is AV\", () => {\r",
							"    pm.expect(response.cmp_status).to.eql(\"AV\");\r",
							"});\r",
							"pm.test(\"company cmp_website is http://stark.com\", () => {\r",
							"    pm.expect(response.cmp_website).to.eql(\"http://stark.com\");\r",
							"});\r",
							"pm.test(\"company cmp_name is house of stark\", () => {\r",
							"    pm.expect(response.cmp_name).to.eql(\"house of stark\");\r",
							"});\r",
							"pm.test(\"company cmp_small_logo is null\", () => {\r",
							"    pm.expect(response.cmp_small_logo).to.eql(null);\r",
							"});\r",
							"pm.test(\"company cmp_main_logo is null\", () => {\r",
							"    pm.expect(response.cmp_main_logo).to.eql(null);\r",
							"});\r",
							"pm.test(\"company cmp_years is 2000\", () => {\r",
							"    pm.expect(response.cmp_years).to.eql(2000);\r",
							"});\r",
							"pm.test(\"company cmp_createdon is 2021-04-06\", () => {\r",
							"    pm.expect(response.cmp_createdon).to.eql(\"2021-04-06\");\r",
							"});\r",
							"pm.test(\"company cmp_updatedby is null\", () => {\r",
							"    pm.expect(response.cmp_updatedby).to.eql(null);\r",
							"});\r",
							"pm.test(\"company cmp_lastupdated is null\", () => {\r",
							"    pm.expect(response.cmp_lastupdated).to.eql(null);\r",
							"});\r",
							"pm.test(\"company cmp_allow_project_create is true\", () => {\r",
							"    pm.expect(response.cmp_allow_project_create).to.eql(true);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{base_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "Token {{base_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}company/company/basic/1",
					"host": [
						"{{base_url}}company"
					],
					"path": [
						"company",
						"basic",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "company details 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"console.log(response.cmp_id);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"company ID is 2\", () => {\r",
							"    pm.expect(response.cmp_id).to.eql(2);\r",
							"});\r",
							"pm.test(\"company pin is housel5455\", () => {\r",
							"    pm.expect(response.company_pin).to.eql(\"housel5455\");\r",
							"});\r",
							"pm.test(\"company ind_code is constructions\", () => {\r",
							"    pm.expect(response.ind_code).to.eql(\"constructions\");\r",
							"});\r",
							"pm.test(\"company cst_code is PL\", () => {\r",
							"    pm.expect(response.cst_code).to.eql(\"PL\");\r",
							"});\r",
							"pm.test(\"company cbt_code is SC\", () => {\r",
							"    pm.expect(response.cbt_code).to.eql(\"SC\");\r",
							"});\r",
							"pm.test(\"company cnt_code is empty\", () => {\r",
							"    pm.expect(response.cnt_code).to.eql(\"\");\r",
							"});\r",
							"pm.test(\"company cmp_status is AV\", () => {\r",
							"    pm.expect(response.cmp_status).to.eql(\"AV\");\r",
							"});\r",
							"pm.test(\"company cmp_website is http://lanister.com\", () => {\r",
							"    pm.expect(response.cmp_website).to.eql(\"http://lanister.com\");\r",
							"});\r",
							"pm.test(\"company cmp_name is House Lannister\", () => {\r",
							"    pm.expect(response.cmp_name).to.eql(\"House Lannister\");\r",
							"});\r",
							"pm.test(\"company cmp_small_logo is null\", () => {\r",
							"    pm.expect(response.cmp_small_logo).to.eql(null);\r",
							"});\r",
							"pm.test(\"company cmp_main_logo is null\", () => {\r",
							"    pm.expect(response.cmp_main_logo).to.eql(null);\r",
							"});\r",
							"pm.test(\"company cmp_years is 1950\", () => {\r",
							"    pm.expect(response.cmp_years).to.eql(1950);\r",
							"});\r",
							"pm.test(\"company cmp_createdon is 2021-04-06\", () => {\r",
							"    pm.expect(response.cmp_createdon).to.eql(\"2021-04-06\");\r",
							"});\r",
							"pm.test(\"company cmp_updatedby is null\", () => {\r",
							"    pm.expect(response.cmp_updatedby).to.eql(null);\r",
							"});\r",
							"pm.test(\"company cmp_lastupdated is null\", () => {\r",
							"    pm.expect(response.cmp_lastupdated).to.eql(null);\r",
							"});\r",
							"pm.test(\"company cmp_allow_project_create is true\", () => {\r",
							"    pm.expect(response.cmp_allow_project_create).to.eql(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{base_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{base_tokrn}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}company/company/basic/2",
					"host": [
						"{{base_url}}company"
					],
					"path": [
						"company",
						"basic",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "List company details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"var schema = {\r",
							"    \"items\":{\r",
							"        \"type\": \"object\",\r",
							"        \"properties\":\r",
							"        {\r",
							"            \"cmp_id\":{\"type\":\"integer\"},\r",
							"            \"company_pin\":{\"type\":\"string\"},\r",
							"            \"cmp_allow_project_create\":{\"type\":\"boolean\"},\r",
							"            \"cmp_years\":{\"type\":\"integer\"}\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"\r",
							"pm.test('schema is valid', function(){\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{base_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{base_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}company/company/basic/",
					"host": [
						"{{base_url}}company"
					],
					"path": [
						"company",
						"basic",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "company shift list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var schema =\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"data\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"shifts\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"csh_id\": {\r",
							"                  \"type\": \"integer\"\r",
							"                },\r",
							"                \"csh_name\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"csh_method\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"csh_differential\": {\r",
							"                  \"type\": \"number\"\r",
							"                },\r",
							"                \"csh_limit_hrs\": {\r",
							"                  \"type\": \"null\"\r",
							"                },\r",
							"                \"csh_created_on\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"csh_effective_date\": {\r",
							"                  \"type\": \"null\"\r",
							"                },\r",
							"                \"cmp_id\": {\r",
							"                  \"type\": \"integer\"\r",
							"                },\r",
							"                \"csh_created_by\": {\r",
							"                  \"type\": \"null\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"csh_id\",\r",
							"                \"csh_name\",\r",
							"                \"csh_method\",\r",
							"                \"csh_differential\",\r",
							"                \"csh_limit_hrs\",\r",
							"                \"csh_created_on\",\r",
							"                \"csh_effective_date\",\r",
							"                \"cmp_id\",\r",
							"                \"csh_created_by\"\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"shifts\"\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\",\r",
							"    \"data\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"var json = pm.response.json()\r",
							"pm.test(\"scema is valid\", function(){\r",
							"    pm.expect(tv4.validate(json, schema)).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{base_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}company/shift/1",
					"host": [
						"{{base_url}}company"
					],
					"path": [
						"shift",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Project Company Team - get {prj_id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var schema = {\r",
							"    \"items\":{\r",
							"        \"type\": \"object\",\r",
							"        \"properties\":\r",
							"        {\r",
							"            \"prj_id\":{\"type\":\"integer\"},\r",
							"            \"pcm_id\":{\"type\":\"integer\"},\r",
							"            \"cmp_id\":{\"type\":\"string\"},\r",
							"            \"pcm_cbt_code\":{\"type\":\"string\"},\r",
							"            \"cbt_name\":{\"type\":\"string\"},\r",
							"            \r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"\r",
							"pm.test('schema is valid', function(){\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var schema = {\r",
							"    \"items\":{\r",
							"        \"type\": \"object\",\r",
							"        \"properties\":\r",
							"        {\r",
							"            \"user_id\":{\"type\":\"string\"},\r",
							"            \"emp_first_name\":{\"type\":\"string\"},\r",
							"            \"emp_last_name\":{\"type\":\"string\"},\r",
							"            \"rol_id\":{\"type\":\"string\"},\r",
							"            \"rol_name\":{\"type\":\"string\"}\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"\r",
							"pm.test('schema is valid', function(){\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{base_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{base_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}project/company/team/3",
					"host": [
						"{{base_url}}project"
					],
					"path": [
						"company",
						"team",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Locations of a company 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var schema =\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"data\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"cmo_id\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"cmo_label\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"cmo_zipcode\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"cmo_street\": {\r",
							"              \"type\": \"null\"\r",
							"            },\r",
							"            \"cmo_city\": {\r",
							"              \"type\": \"null\"\r",
							"            },\r",
							"            \"cmo_lattitude\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"cmo_longitude\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"cmo_plus_code\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"cmo_contact_number\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"cmo_address\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"cmo_updated_at\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"cmp_id\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"cmo_id\",\r",
							"            \"cmo_label\",\r",
							"            \"cmo_zipcode\",\r",
							"            \"cmo_street\",\r",
							"            \"cmo_city\",\r",
							"            \"cmo_state\",\r",
							"            \"cmo_country\",\r",
							"            \"cmo_lattitude\",\r",
							"            \"cmo_longitude\",\r",
							"            \"cmo_plus_code\",\r",
							"            \"cmo_contact_number\",\r",
							"            \"cmp_id\"\r",
							"          ]\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"data\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"var json = pm.response.json()\r",
							"pm.test(\"scema is valid\", function(){\r",
							"    pm.expect(tv4.validate(json, schema)).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{base_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}company/location/list/1",
					"host": [
						"{{base_url}}company"
					],
					"path": [
						"location",
						"list",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "All Permissions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var schema =\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"object_name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"permissions\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"per_id\": {\r",
							"                  \"type\": \"integer\"\r",
							"                },\r",
							"                \"per_actions\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"per_object\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"per_id\",\r",
							"                \"per_actions\",\r",
							"                \"per_object\"\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"object_name\",\r",
							"        \"permissions\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"var json = pm.response.json()\r",
							"pm.test(\"scema is valid\", function(){\r",
							"    pm.expect(tv4.validate(json, schema)).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{base_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Token {{token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}system/role/permission/",
					"host": [
						"{{base_url}}system"
					],
					"path": [
						"role",
						"permission",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Plan Files List URLs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var schema =\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"urls\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {}\r",
							"    },\r",
							"    \"psm_version\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"urls\",\r",
							"    \"psm_version\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"var json = pm.response.json()\r",
							"pm.test(\"scema is valid\", function(){\r",
							"    pm.expect(tv4.validate(json, schema)).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{base_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}plan/5/planfiles",
					"host": [
						"{{base_url}}plan"
					],
					"path": [
						"5",
						"planfiles"
					]
				}
			},
			"response": []
		}
	]
}